# =============================================================================
# RAG CHATBOT PROJECT CONFIGURATION
# =============================================================================
# Modern Python project configuration using pyproject.toml (PEP 621)
# This file centralizes all project metadata and tool configurations

[build-system]
# Modern build system using setuptools
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

# =============================================================================
# PROJECT METADATA
# =============================================================================
[project]
name = "rag-chatbot"
version = "1.0.0"
description = "Advanced RAG chatbot with multi-stage prompting, caching, and Gradio UI"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"

# Author information
authors = [
    {name = "RAG Chatbot Team", email = "team@ragchatbot.dev"}
]

# Project keywords for discovery
keywords = [
    "rag", 
    "chatbot", 
    "langchain", 
    "fastapi", 
    "ai", 
    "ml", 
    "nlp", 
    "gradio",
    "semantic-search",
    "document-qa"
]

# PyPI classifiers for project categorization
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Framework :: FastAPI",
    "Framework :: AsyncIO",
]

# Core dependencies (matches requirements.txt)
dependencies = [
    "fastapi==0.115.6",
    "uvicorn[standard]==0.33.0",
    "langchain==0.3.14",
    "langchain-google-genai==2.0.7",
    "sentence-transformers==3.3.1",
    "transformers==4.47.1",
    "torch==2.8.0",
    "faiss-cpu==1.9.0",
    "PyPDF2==3.0.1",
    "pdfplumber==0.11.0",
    "sqlalchemy==2.0.36",
    "httpx==0.28.1",
    "requests==2.32.3",
    "pydantic==2.10.3",
    "pydantic-settings==2.6.1",
    "aiofiles==24.1.0",
    "python-dotenv==1.0.1",
    "gradio==5.44.1",
]

# Optional dependency groups for different use cases
[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest==8.3.4",
    "pytest-asyncio==0.24.0",
    "black==24.10.0",
    "isort==5.13.2",
    "mypy>=1.8.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]

# Testing dependencies
test = [
    "pytest==8.3.4",
    "pytest-asyncio==0.24.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "httpx>=0.28.1",  # For testing FastAPI endpoints
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]

# Production deployment dependencies
prod = [
    "gunicorn>=21.0.0",
    "uvloop>=0.19.0",  # Better async performance
    "httptools>=0.6.0",  # Better HTTP parsing
]

# Project URLs for PyPI and documentation
[project.urls]
Homepage = "https://github.com/yourusername/rag-chatbot"
Documentation = "https://github.com/yourusername/rag-chatbot/docs"
Repository = "https://github.com/yourusername/rag-chatbot"
"Bug Tracker" = "https://github.com/yourusername/rag-chatbot/issues"
Changelog = "https://github.com/yourusername/rag-chatbot/blob/main/CHANGELOG.md"

# =============================================================================
# TOOL CONFIGURATIONS
# =============================================================================

# Black - Python code formatter
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories to exclude
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | data
  | logs
)/
'''

# isort - Import statement formatter
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["app"]
known_third_party = [
    "fastapi", 
    "langchain", 
    "sentence_transformers", 
    "faiss",
    "gradio",
    "pydantic",
    "sqlalchemy"
]

# pytest - Testing configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

# MyPy - Static type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Ignore missing imports for external libraries without stubs
[[tool.mypy.overrides]]
module = [
    "faiss.*",
    "sentence_transformers.*",
    "transformers.*",
    "langchain.*",
    "gradio.*",
]
ignore_missing_imports = true

# Ruff - Fast Python linter (alternative to flake8)
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # mccabe
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*" = ["E712"]   # Allow == True/False in tests

# =============================================================================
# SETUPTOOLS CONFIGURATION (for packaging)
# =============================================================================
[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*", "docs*"]

# =============================================================================
# PROJECT SCRIPTS/ENTRY POINTS
# =============================================================================
[project.scripts]
# Command-line scripts that will be available after installation
rag-server = "app.main:run_server"
rag-ui = "frontend.app:main"

# =============================================================================
# BUILD CONFIGURATION
# =============================================================================
[tool.setuptools.package-data]
# Include important files in the package
"app" = ["py.typed"]
"*" = ["*.yaml", "*.yml", "*.json", "*.toml"]